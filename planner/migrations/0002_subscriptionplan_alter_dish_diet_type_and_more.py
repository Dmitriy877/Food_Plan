# Generated by Django 5.2.7 on 2025-10-23 14:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def create_subscription_plans(apps, schema_editor):
    SubscriptionPlan = apps.get_model('planner', 'SubscriptionPlan')

    plans_data = [
        {
            'duration': 1,
            'breakfast_price': 100,
            'lunch_price': 300,
            'dinner_price': 200,
            'dessert_price': 100,
        },
        {
            'duration': 3,
            'breakfast_price': 200,
            'lunch_price': 600,
            'dinner_price': 400,
            'dessert_price': 200,
        },
        {
            'duration': 6,
            'breakfast_price': 300,
            'lunch_price': 900,
            'dinner_price': 600,
            'dessert_price': 300,
        },
        {
            'duration': 12,
            'breakfast_price': 400,
            'lunch_price': 1200,
            'dinner_price': 800,
            'dessert_price': 400,
        },
    ]

    for plan_data in plans_data:
        SubscriptionPlan.objects.get_or_create(**plan_data)


def reverse_create_subscription_plans(apps, schema_editor):
    SubscriptionPlan = apps.get_model('planner', 'SubscriptionPlan')
    SubscriptionPlan.objects.all().delete()


def add_allergies(apps, schema_editor):
    Allergy = apps.get_model('planner', 'Allergy')

    allergies_data = [
        'Рыба и морепродукты',
        'Мясо',
        'Зерновые',
        'Продукты пчеловодства',
        'Орехи и бобовые',
        'Молочные продукты'
    ]

    for allergy_name in allergies_data:
        Allergy.objects.get_or_create(name=allergy_name)


def reverse_add_allergies(apps, schema_editor):
    Allergy = apps.get_model('planner', 'Allergy')
    Allergy.objects.filter(
        name__in=[
            'Рыба и морепродукты',
            'Мясо',
            'Зерновые',
            'Продукты пчеловодства',
            'Орехи и бобовые',
            'Молочные продукты'
        ]
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.IntegerField(choices=[(1, '1 месяц'), (3, '3 месяца'), (6, '6 месяцев'), (12, '12 месяцев')], db_index=True, default=1, unique=True, verbose_name='Срок подписки')),
                ('breakfast_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена подписки на завтраки')),
                ('lunch_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена подписки на обеды')),
                ('dinner_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена подписки на ужины')),
                ('dessert_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена подписки на десерты')),
            ],
            options={
                'verbose_name': 'Тарифный план',
                'verbose_name_plural': 'Тарифные планы',
            },
        ),
        migrations.AlterField(
            model_name='dish',
            name='diet_type',
            field=models.CharField(blank=True, choices=[('classic', 'Классическая'), ('low_carb', 'Низкоуглеводная'), ('vegetarian', 'Вегетарианская'), ('keto', 'Кето')], null=True, verbose_name='Тип меню'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='diet_type',
            field=models.CharField(blank=True, choices=[('classic', 'Классическая'), ('low_carb', 'Низкоуглеводная'), ('vegetarian', 'Вегетарианская'), ('keto', 'Кето')], db_index=True, null=True, verbose_name='Тип диеты'),
        ),
        migrations.AlterModelOptions(
            name='userprofile',
            options={'verbose_name': 'Профиль пользователя', 'verbose_name_plural': 'Профили пользователей'},
        ),
        migrations.RenameField(
            model_name='userprofile',
            old_name='count_of_persons',
            new_name='persons_count',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='breakfast',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='dessert',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='dinner',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='lunch',
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='planner.subscriptionplan', verbose_name='Тарифный план'),
        ),
        migrations.DeleteModel(
            name='DietType',
        ),
        migrations.RunPython(create_subscription_plans, reverse_create_subscription_plans),
        migrations.RunPython(add_allergies, reverse_add_allergies),
    ]
